{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Course\\\\inotebook\\\\src\\\\context\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport NoteContext from \"./noteContext\";\nimport Notes from \"../Components/Notes\";\nimport Alert from \"../Components/Alert\";\n\n//creating a notestate and sending to the NoteContext provider\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  //useNavigate is use to redirect to another page after successfully login\n  const navigate = useNavigate(); // initialize navigation\n\n  const [notes, setnotes] = useState([]);\n  var email;\n  const [auth_Token, setAuthToken] = useState(null);\n  const token = localStorage.getItem('auth_token');\n  const [alertMessage, setAlertMessage] = useState(false);\n  const [pendingDeleteId, setPendingDeleteId] = useState(null);\n  const [alert_type, setalert_type] = useState('danger');\n  var allnotes;\n  var delete_note_id;\n  const host = \"http://localhost:5000\";\n\n  //to fetch all notes of the specific user\n  const initialNotes = async () => {\n    // Use token from either prop or localStorage\n    //  const token1 = auth_Token;\n\n    //  if (!token1) {\n    //    console.error('No token available for API call');\n    //    return;\n    //  }\n    const response = await fetch(`${host}/notes/getnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDcwMzlhNGM1MTZlYzFhY2Q2MDg5NSIsIm5hbWUiOiJTYWdhciBCaGFuZGFyaSIsImVtYWlsIjoic2FnYXI5MDFAZ21haWwuY29tIiwiaWF0IjoxNzQ2MDkwMzE0fQ.xtjq7iJ89O6dLhhfHII1CVDduB4vpaeYHkFl9rqSMWw\"\n      },\n      body: JSON.stringify({\n        \"email\": \"sagar901@gmail.com\",\n        \"password\": \"sagar123\"\n      })\n      // ...\n    });\n    if (response.ok) {\n      const data = await response.json();\n      allnotes = data.notes;\n      // console.log(allnotes);\n      setnotes(data.notes);\n      setAuthToken(auth_Token);\n      console.log(auth_Token);\n    } else {\n      console.log(\"Unable to fetch the data\", response.status);\n    }\n  };\n\n  // //it act as the componentdidmount() to initally fetch the data\n  useEffect(() => {\n    //   const token = localStorage.getItem('auth_token');\n    //   const user = JSON.parse(localStorage.getItem('user'));\n    //   const email = user?.email;\n    //   const password = 'sagar123'; // You might need to rethink password storage\n\n    //   if (token && email) {\n    //     setAuthToken(token);\n    // initialNotes(email,password); // careful: you shouldn't store password like this\n\n    // }\n    initialNotes(); // <-- CALL the function when component mounts\n  }, []); // empty dependency array means it runs only once\n\n  //function to add notes\n  const addNote = async (title, description, tag) => {\n    const token1 = auth_Token || localStorage.getItem('auth_token');\n\n    //api call to add note\n\n    const response = await fetch(`${host}/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": token1\n      },\n      body: JSON.stringify({\n        title: title,\n        tag: tag,\n        description: description\n      })\n      // ...\n    });\n    const note = {\n      _id: Math.random().toString(36).substr(2, 9),\n      // fake unique id\n      user: \"some-user-id\",\n      // you can replace this with the actual user ID\n      title,\n      description,\n      tag,\n      date: new Date().toISOString()\n      // __v: 0\n    };\n    console.log(\"Adding a new note:\", note);\n    setnotes(notes.concat(note));\n  };\n\n  //function to editnote\n  const editNote = async (id, title, tag, description) => {\n    const token1 = auth_Token;\n    if (!token1) {\n      console.error('No token available for deletion');\n      return;\n    }\n    //api call for update the notes\n\n    const response = await fetch(`${host}/notes/update`, {\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": token1\n      },\n      body: JSON.stringify({\n        id: id,\n        title: title,\n        tag: tag,\n        description: description\n      })\n      // ...\n    });\n    const result = response.json();\n    return result;\n  };\n\n  //function to store the id of note to be delete\n  const deleteNote = id => {\n    setalert_type('danger');\n    setPendingDeleteId(id); // store the note id waiting for confirmation\n    setAlertMessage(\"Are you sure you want to delete this note?\");\n\n    // delete_note_id=id;\n    // console.log(delete_note_id);\n    // setdelete(true);\n    navigate('/notes', {\n      state: {\n        setalert_type: alert_type\n      }\n    });\n    console.log(auth_Token);\n  };\n\n  //function to cancel delete \n  const cancelDelete = () => {\n    setPendingDeleteId(null); // Clear pending delete ID\n    setAlertMessage(false); // Dismiss alert\n  };\n\n  //to delete note when only confirm deletion is clicked \n  const ConfirmDeleteNote = async () => {\n    const token1 = auth_Token; // Get token from state or localStorage\n    console.log(token1);\n    if (!token1) {\n      console.error('No token available for deletion');\n      return;\n    }\n    if (!pendingDeleteId) return;\n\n    // api call for deletion\n    const response = await fetch(`${host}/notes/delete`, {\n      method: \"DELETE\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": token1\n      },\n      body: JSON.stringify({\n        id: pendingDeleteId\n      })\n      // ...\n    });\n    setalert_type('success');\n    const result = response.json();\n    console.log(result);\n    const NewNotes = notes.filter(note => note._id !== pendingDeleteId);\n    setnotes(NewNotes);\n\n    //setting color of alert to green\n\n    // Clear pending\n    setPendingDeleteId(null);\n\n    // Success alert\n    setAlertMessage(\"Note deleted successfully!\");\n    setTimeout(() => {\n      setAlertMessage(false);\n    }, 3000);\n    navigate('/notes', {\n      state: {\n        setalert_type: alert_type\n      }\n    });\n  };\n\n  //to handle login \n  const HandleLogin = async () => {\n    email = document.getElementById('email').value;\n    var password = document.getElementById('password').value;\n    var password_error = document.getElementById('password_error');\n    if (!email) {\n      alert(\"Email is require\");\n      return false;\n    }\n    if (!password) {\n      alert(\"Password is required\");\n      return false; //to prevent form from submission\n    }\n\n    //api call for login\n    const response = await fetch(`${host}/api/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      // console.log(data);\n\n      setAuthToken(data.auth_Token);\n\n      // const user_email=data.user.email;\n      await initialNotes(data.user, password, data.auth_Token);\n      navigate('/notes', {\n        state: {\n          user: data.user,\n          pw: password,\n          auth_Token: data.auth_Token\n        }\n      });\n\n      // Save to localStorage\n      localStorage.setItem('auth_token', data.auth_Token); // <-- This is correct\n\n      console.log(\"The auth token is :\" + auth_Token);\n\n      // to navigate to home after success login with user details\n    } else {\n      password_error.innerHTML = \"* Email or Password is incorrect.\";\n      console.log(\"Unable to fetch the data\", response.status);\n    }\n  };\n\n  //to handle signup user registration\n  const HandleSignup = async () => {\n    var name = document.getElementById('name').value;\n    var email = document.getElementById('email_sign').value;\n    var address = document.getElementById('address').value;\n    var password = document.getElementById('password-sign').value;\n    var confirmpassword = document.getElementById('confirmpassword').value;\n    if (!name) {\n      alert(\"Name is required\");\n      return false; //which prevent the form submission\n    }\n    if (!email) {\n      alert(\"Email is required\");\n      return false;\n    }\n    if (!address) {\n      alert(\"Address is required\");\n      return false;\n    }\n    if (!password) {\n      alert(\"Password is required.\");\n      return false;\n    }\n    if (password.length < 8) {\n      alert(\"Password length should be Minimum 8\");\n      return false;\n    }\n    if (!confirmpassword) {\n      alert(\"Please! Enter confirm Password\");\n      return false;\n    }\n    if (confirmpassword !== password) {\n      alert(\"Confirm Password doesn't match !\");\n      return false;\n    }\n\n    //apicall to register user in database\n\n    const response = await fetch(`${host}/api/auth/createUser`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: name,\n        address: address,\n        email: email,\n        password: password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      setAuthToken(data.auth_Token);\n\n      // Save to localStorage\n      localStorage.setItem('auth_token', data.auth_Token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      await initialNotes(data.user, password, data.auth_Token);\n\n      // to navigate to home after success login with user details\n      navigate('/notes', {\n        state: {\n          user: data.user,\n          pw: password,\n          auth_Token: data.auth_Token\n        }\n      });\n    } else {\n      console.log(\"Unable to register User\", response.status);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setnotes,\n      addNote,\n      editNote,\n      deleteNote,\n      ConfirmDeleteNote,\n      HandleLogin,\n      HandleSignup,\n      initialNotes,\n      alertMessage,\n      setAlertMessage,\n      cancelDelete,\n      alert_type,\n      setalert_type\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 445,\n    columnNumber: 1\n  }, this);\n};\n_s(NoteState, \"Y/T4LfYQbgw9rAoKbZ0C8JK+D8M=\", false, function () {\n  return [useNavigate];\n});\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","NoteContext","Notes","Alert","jsxDEV","_jsxDEV","NoteState","props","_s","navigate","notes","setnotes","email","auth_Token","setAuthToken","token","localStorage","getItem","alertMessage","setAlertMessage","pendingDeleteId","setPendingDeleteId","alert_type","setalert_type","allnotes","delete_note_id","host","initialNotes","response","fetch","method","headers","body","JSON","stringify","ok","data","json","console","log","status","addNote","title","description","tag","token1","note","_id","Math","random","toString","substr","user","date","Date","toISOString","concat","editNote","id","error","result","deleteNote","state","cancelDelete","ConfirmDeleteNote","NewNotes","filter","setTimeout","HandleLogin","document","getElementById","value","password","password_error","alert","pw","setItem","innerHTML","HandleSignup","name","address","confirmpassword","length","Provider","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/React Course/inotebook/src/context/NoteState.js"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport NoteContext from \"./noteContext\";\r\nimport Notes from \"../Components/Notes\";\r\nimport Alert from \"../Components/Alert\";\r\n\r\n\r\n//creating a notestate and sending to the NoteContext provider\r\nconst NoteState=(props)=>{\r\n\r\n  \r\n  //useNavigate is use to redirect to another page after successfully login\r\n  const navigate = useNavigate(); // initialize navigation\r\n  \r\n  const [notes,setnotes]=useState([]);\r\n\r\n  var email;\r\n  const [auth_Token, setAuthToken] = useState(null);\r\n\r\n\r\n  const token=localStorage.getItem('auth_token');\r\n\r\n\r\n  const [alertMessage, setAlertMessage] = useState(false);\r\n\r\n  \r\n  const [pendingDeleteId, setPendingDeleteId] = useState(null);\r\n  \r\n  const [alert_type,setalert_type]=useState('danger');\r\n\r\n\r\n\r\n\r\n  var allnotes;\r\n  var delete_note_id;\r\n  const host=\"http://localhost:5000\";\r\n\r\n\r\n  //to fetch all notes of the specific user\r\nconst initialNotes=async ()=>{\r\n\r\n   // Use token from either prop or localStorage\r\n  //  const token1 = auth_Token;\r\n  \r\n  //  if (!token1) {\r\n  //    console.error('No token available for API call');\r\n  //    return;\r\n  //  }\r\n  const response = await fetch(`${host}/notes/getnotes`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDcwMzlhNGM1MTZlYzFhY2Q2MDg5NSIsIm5hbWUiOiJTYWdhciBCaGFuZGFyaSIsImVtYWlsIjoic2FnYXI5MDFAZ21haWwuY29tIiwiaWF0IjoxNzQ2MDkwMzE0fQ.xtjq7iJ89O6dLhhfHII1CVDduB4vpaeYHkFl9rqSMWw\"\r\n    },\r\n    body: JSON.stringify({\r\n      \"email\":\"sagar901@gmail.com\",\r\n      \"password\":\"sagar123\"\r\n    \r\n\r\n     }),\r\n    // ...\r\n  });\r\n\r\n  if(response.ok){\r\nconst data=await response.json();\r\n allnotes=data.notes;\r\n// console.log(allnotes);\r\nsetnotes(data.notes);\r\nsetAuthToken(auth_Token);\r\nconsole.log(auth_Token);\r\n  }\r\n  else{\r\n    console.log(\"Unable to fetch the data\",response.status);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n// //it act as the componentdidmount() to initally fetch the data\r\nuseEffect(() => {\r\n\r\n//   const token = localStorage.getItem('auth_token');\r\n//   const user = JSON.parse(localStorage.getItem('user'));\r\n//   const email = user?.email;\r\n//   const password = 'sagar123'; // You might need to rethink password storage\r\n  \r\n//   if (token && email) {\r\n//     setAuthToken(token);\r\n    // initialNotes(email,password); // careful: you shouldn't store password like this\r\n\r\n  // }\r\n  initialNotes(); // <-- CALL the function when component mounts\r\n}, []); // empty dependency array means it runs only once\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n//function to add notes\r\nconst addNote = async (title, description, tag,) => {\r\n\r\n\r\n  const token1 = auth_Token || localStorage.getItem('auth_token');\r\n\r\n  //api call to add note\r\n\r\n  const response = await fetch(`${host}/notes/addnotes`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":token1\r\n    },\r\n    body: JSON.stringify({\r\n\r\n      title:title,\r\n      tag:tag,\r\n      description:description\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  \r\n\r\n  const note = {\r\n    _id: Math.random().toString(36).substr(2, 9), // fake unique id\r\n    user: \"some-user-id\", // you can replace this with the actual user ID\r\n    title,\r\n    description,\r\n    tag,\r\n    date: new Date().toISOString()\r\n    // __v: 0\r\n  };\r\n\r\n  console.log(\"Adding a new note:\", note);\r\n  setnotes(notes.concat(note));\r\n};\r\n\r\n\r\n\r\n//function to editnote\r\nconst editNote=async (id,title,tag,description)=>{\r\n\r\n\r\n  const token1 = auth_Token ;\r\n  \r\n  if (!token1) {\r\n    console.error('No token available for deletion');\r\n    return;\r\n  }\r\n  //api call for update the notes\r\n\r\n  const response = await fetch(`${host}/notes/update`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":token1\r\n    },\r\n    body: JSON.stringify({\r\n       id:id,\r\n       title:title,\r\n       tag:tag,\r\n       description:description\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  const result=response.json();\r\n  return result;\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n//function to store the id of note to be delete\r\nconst deleteNote=(id)=>{\r\n\r\n\r\n  setalert_type('danger')\r\n\r\n  setPendingDeleteId(id); // store the note id waiting for confirmation\r\n  setAlertMessage(\"Are you sure you want to delete this note?\");\r\n\r\n// delete_note_id=id;\r\n// console.log(delete_note_id);\r\n// setdelete(true);\r\nnavigate('/notes',{state:{setalert_type:alert_type}});\r\nconsole.log(auth_Token);\r\n};\r\n\r\n\r\n//function to cancel delete \r\nconst cancelDelete = () => {\r\n  setPendingDeleteId(null); // Clear pending delete ID\r\n  setAlertMessage(false); // Dismiss alert\r\n};\r\n\r\n\r\n\r\n//to delete note when only confirm deletion is clicked \r\nconst ConfirmDeleteNote=async()=>{\r\n  \r\n  const token1 = auth_Token ; // Get token from state or localStorage\r\n  console.log(token1);\r\n  \r\n  if (!token1) {\r\n    console.error('No token available for deletion');\r\n    return;\r\n  }\r\n  if (!pendingDeleteId) return;\r\n  \r\n  // api call for deletion\r\n  const response = await fetch(`${host}/notes/delete`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":token1\r\n    },\r\n    body: JSON.stringify({\r\n      \r\n      id:pendingDeleteId\r\n      \r\n      \r\n    }),\r\n    // ...\r\n  });\r\n  \r\n  setalert_type('success');\r\nconst result= response.json();\r\nconsole.log(result);\r\n\r\n\r\n  \r\n  const NewNotes=notes.filter((note)=>\r\n    note._id!==pendingDeleteId);\r\n  setnotes(NewNotes);\r\n\r\n//setting color of alert to green\r\n\r\n  // Clear pending\r\n  setPendingDeleteId(null);\r\n  \r\n  // Success alert\r\n  setAlertMessage(\"Note deleted successfully!\");\r\n\r\n  setTimeout(() => {\r\n    setAlertMessage(false);\r\n  }, 3000);\r\n\r\n  navigate('/notes' ,{state:{setalert_type:alert_type}});\r\n};\r\n\r\n\r\n//to handle login \r\nconst HandleLogin=async ()=>{\r\n    email=document.getElementById('email').value;\r\n    var password=document.getElementById('password').value;\r\n   var password_error=document.getElementById('password_error');\r\n\r\n   if(!email){\r\n    alert(\"Email is require\");\r\n    return false;\r\n   }\r\n\r\n   if(!password){\r\n    alert(\"Password is required\");\r\n    return false;//to prevent form from submission\r\n\r\n   }\r\n\r\n//api call for login\r\n  const response = await fetch(`${host}/api/auth/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({\r\n\r\n      email:email,\r\n      password:password,\r\n\r\n     }),\r\n\r\n\r\n  \r\n  });\r\n\r\n  if(response.ok){\r\n    const data=await response.json();\r\n    // console.log(data);\r\n\r\n    setAuthToken(data.auth_Token);\r\n\r\n    // const user_email=data.user.email;\r\n    await initialNotes(data.user,password,data.auth_Token);\r\n  \r\n\r\n    \r\n    navigate('/notes',{state:{user:data.user,pw:password,auth_Token:data.auth_Token}});\r\n\r\n      // Save to localStorage\r\n      localStorage.setItem('auth_token', data.auth_Token); // <-- This is correct\r\n      \r\n\r\n\r\n    console.log(\"The auth token is :\"+auth_Token);\r\n    \r\n\r\n    // to navigate to home after success login with user details\r\n\r\n      }\r\n      else{\r\n\r\n  \r\n        password_error.innerHTML=\"* Email or Password is incorrect.\";\r\n        console.log(\"Unable to fetch the data\",response.status);\r\n      }\r\n\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n//to handle signup user registration\r\n const HandleSignup= async()=>{\r\n\r\n\r\n\r\n\r\nvar name=document.getElementById('name').value;\r\nvar email=document.getElementById('email_sign').value;\r\nvar address=document.getElementById('address').value;\r\nvar password=document.getElementById('password-sign').value;\r\nvar confirmpassword=document.getElementById('confirmpassword').value;\r\n\r\nif(!name){\r\n  alert(\"Name is required\");\r\n  return false;//which prevent the form submission\r\n}\r\n\r\nif(!email){\r\n  alert(\"Email is required\");\r\n  return false;\r\n}\r\n\r\nif(!address){\r\n  alert(\"Address is required\");\r\n  return false;\r\n}\r\nif(!password ){\r\n  alert(\"Password is required.\")\r\n  return false;\r\n\r\n}\r\n\r\nif(password.length<8){\r\n  alert(\"Password length should be Minimum 8\");\r\n  return false;\r\n}\r\n\r\nif(!confirmpassword){\r\n  alert(\"Please! Enter confirm Password\");\r\n  return false;\r\n}\r\n\r\nif(confirmpassword!==password){\r\n  alert(\"Confirm Password doesn't match !\");\r\n  return false;\r\n}\r\n\r\n\r\n//apicall to register user in database\r\n\r\nconst response = await fetch(`${host}/api/auth/createUser`, {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Accept\":\"*/*\",\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n  body: JSON.stringify({\r\n    name:name,\r\n    address:address,\r\n    email:email,\r\n    password:password,\r\n\r\n   }),\r\n\r\n\r\n\r\n});\r\n\r\nif(response.ok){\r\n  const data=await response.json();\r\n\r\n\r\n  setAuthToken(data.auth_Token);\r\n\r\n\r\n\r\n    // Save to localStorage\r\n    localStorage.setItem('auth_token',data.auth_Token);\r\nlocalStorage.setItem('user', JSON.stringify(data.user));\r\n  \r\n  await initialNotes(data.user,password,data.auth_Token);\r\n\r\n  // to navigate to home after success login with user details\r\n  navigate('/notes',{state:{user:data.user,pw:password,auth_Token:data.auth_Token}});\r\n\r\n    }\r\n\r\n    else{\r\n      console.log(\"Unable to register User\",response.status);\r\n    }\r\n\r\n \r\n\r\n }  \r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n<NoteContext.Provider value={{notes,setnotes,addNote,editNote,deleteNote,ConfirmDeleteNote,HandleLogin,HandleSignup,initialNotes,alertMessage, setAlertMessage,cancelDelete,alert_type,setalert_type }}>\r\n\r\n{props.children}\r\n    \r\n</NoteContext.Provider>\r\n\r\n\r\n    );\r\n   \r\n\r\n\r\n\r\n\r\n    \r\n  }\r\n\r\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}