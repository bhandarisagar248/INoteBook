{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Course\\\\inotebook\\\\src\\\\context\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport Notes from \"../Components/Notes\";\n\n//creating a notestate and sending to the NoteContext provider\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  var allnotes;\n  var delete_note_id;\n  const host = \"http://localhost:5000\";\n\n  //to fetch all notes of the specific user\n  const initalNotes = async () => {\n    const response = await fetch(`${host}/notes/getnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1MjkwNzE5fQ.zLW9BKFNRoHGyzj10SEapokRXDugskXPI-BFgOhFSBk\"\n      },\n      body: JSON.stringify({\n        \"email\": \"sagar901@gmail.com\",\n        \"password\": \"sagar123\"\n      })\n      // ...\n    });\n    if (response.ok) {\n      const data = await response.json();\n      allnotes = data.notes;\n      console.log(allnotes);\n      setnotes(data.notes);\n    } else {\n      console.log(\"Unable to fetch the data\", response.status);\n    }\n  };\n\n  //it act as the componentdidmount() to initally fetch the data\n  useEffect(() => {\n    initalNotes(); // <-- CALL the function when component mounts\n  }, []); // empty dependency array means it runs only once\n\n  const [notes, setnotes] = useState([]);\n\n  //function to add notes\n  const addNote = async (title, description, tag) => {\n    //api call to add note\n\n    const response = await fetch(`${host}/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\n      },\n      body: JSON.stringify({\n        title: title,\n        tag: tag,\n        description: description\n      })\n      // ...\n    });\n    const note = {\n      _id: Math.random().toString(36).substr(2, 9),\n      // fake unique id\n      user: \"some-user-id\",\n      // you can replace this with the actual user ID\n      title,\n      description,\n      tag,\n      date: new Date().toISOString()\n      // __v: 0\n    };\n    console.log(\"Adding a new note:\", note);\n    setnotes(notes.concat(note));\n  };\n\n  //function to editnote\n  const editNote = async (id, title, tag, description) => {\n    //api call for update the notes\n\n    const response = await fetch(`${host}/notes/update`, {\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\n      },\n      body: JSON.stringify({\n        id: id,\n        title: title,\n        tag: tag,\n        description: description\n      })\n      // ...\n    });\n    return response.json(\"successfully update\");\n  };\n\n  //function to store the id of note to be delete\n  const deleteNote = id => {\n    delete_note_id = id;\n    console.log(delete_note_id);\n  };\n\n  //to delete note when only confirm deletion is clicked \n  const ConfirmDeleteNote = async () => {\n    // api call for deletion\n    const response = await fetch(`${host}/notes/delete`, {\n      method: \"DELETE\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\n      },\n      body: JSON.stringify({\n        id: delete_note_id\n      })\n      // ...\n    });\n    const result = response.json();\n    console.log(result);\n    const NewNotes = notes.filter(note => {\n      return note._id !== delete_note_id;\n    });\n    setnotes(NewNotes);\n  };\n\n  //to handle login \n  const HandleLogin = async () => {\n    var email = document.getElementById('email').value;\n    var password = document.getElementById('password').value;\n    var email_error = document.getElementById('email_error');\n    var password_error = document.getElementById('password_error');\n    if (!email) {\n      alert(\"Email is require\");\n      return false;\n    }\n    if (!password) {\n      alert(\"Password is required\");\n      return false; //to prevent form from submission\n    }\n\n    //api call for login\n    const response = await fetch(`${host}/api/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log(data);\n    } else {\n      email_error.innerHTML = \"* Email is incorrect.\";\n      password_error.innerHTML = \"Password is incorrect.\";\n      console.log(\"Unable to fetch the data\", response.status);\n    }\n  };\n  const HandleSignup = async () => {\n    console.log(\"Sign up clicked\");\n    var name = document.getElementById('name').value;\n    var email = document.getElementById('email_sign').value;\n    var address = document.getElementById('address').value;\n    var password = document.getElementById('password-sign').value;\n    var confirmpassword = document.getElementById('confirmpassword').value;\n    if (!name) {\n      alert(\"Name is required\");\n      return false; //which prevent the form submission\n    }\n    if (!email) {\n      alert(\"Email is required\");\n      return false;\n    }\n    if (!address) {\n      alert(\"Address is required\");\n      return false;\n    }\n    if (!password) {\n      alert(\"Password is required.\");\n      return false;\n    }\n    if (!confirmpassword) {\n      alert(\"Please! Enter confirm Password\");\n      return false;\n    }\n    if (confirmpassword !== password) {\n      alert(\"Confirm Password doesn't match !\");\n      return false;\n    }\n    console.log(name);\n    console.log(email);\n    console.log(address);\n    console.log(password);\n    console.log(confirmpassword);\n\n    //apicall to register user in database\n\n    const response = await fetch(`${host}/api/auth/createUser`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"\"\n      },\n      body: JSON.stringify({\n        name: name,\n        address: address,\n        email: email,\n        password: password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log(\"Success fully register user\");\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Notes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 1\n        }, this)\n      }, void 0, false);\n    } else {\n      console.log(\"Unable to fetch the data\", response.status);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setnotes,\n      addNote,\n      editNote,\n      deleteNote,\n      ConfirmDeleteNote,\n      HandleLogin,\n      HandleSignup\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 1\n  }, this);\n};\n_s(NoteState, \"Ms/ybEjMuxQKbHNs5d2OPfAUa4w=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","useEffect","NoteContext","Notes","jsxDEV","_jsxDEV","Fragment","_Fragment","NoteState","props","_s","allnotes","delete_note_id","host","initalNotes","response","fetch","method","headers","body","JSON","stringify","ok","data","json","notes","console","log","setnotes","status","addNote","title","description","tag","note","_id","Math","random","toString","substr","user","date","Date","toISOString","concat","editNote","id","deleteNote","ConfirmDeleteNote","result","NewNotes","filter","HandleLogin","email","document","getElementById","value","password","email_error","password_error","alert","innerHTML","HandleSignup","name","address","confirmpassword","children","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","$RefreshReg$"],"sources":["E:/React Course/inotebook/src/context/NoteState.js"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\nimport Notes from \"../Components/Notes\";\r\n\r\n\r\n//creating a notestate and sending to the NoteContext provider\r\nconst NoteState=(props)=>{\r\n\r\n\r\n  var allnotes;\r\n  var delete_note_id;\r\n  const host=\"http://localhost:5000\";\r\n\r\n\r\n  //to fetch all notes of the specific user\r\nconst initalNotes=async ()=>{\r\n  const response = await fetch(`${host}/notes/getnotes`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1MjkwNzE5fQ.zLW9BKFNRoHGyzj10SEapokRXDugskXPI-BFgOhFSBk\"\r\n    },\r\n    body: JSON.stringify({\r\n      \"email\":\"sagar901@gmail.com\",\r\n      \"password\":\"sagar123\"\r\n    \r\n\r\n     }),\r\n    // ...\r\n  });\r\n\r\n  if(response.ok){\r\nconst data=await response.json();\r\n allnotes=data.notes;\r\nconsole.log(allnotes);\r\n  setnotes(data.notes);\r\n\r\n  }\r\n  else{\r\n    console.log(\"Unable to fetch the data\",response.status);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n//it act as the componentdidmount() to initally fetch the data\r\nuseEffect(() => {\r\n  initalNotes(); // <-- CALL the function when component mounts\r\n}, []); // empty dependency array means it runs only once\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    const [notes,setnotes]=useState([]);\r\n\r\n\r\n//function to add notes\r\nconst addNote = async (title, description, tag,) => {\r\n\r\n\r\n\r\n  //api call to add note\r\n\r\n  const response = await fetch(`${host}/notes/addnotes`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\r\n    },\r\n    body: JSON.stringify({\r\n\r\n      title:title,\r\n      tag:tag,\r\n      description:description\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  \r\n\r\n  const note = {\r\n    _id: Math.random().toString(36).substr(2, 9), // fake unique id\r\n    user: \"some-user-id\", // you can replace this with the actual user ID\r\n    title,\r\n    description,\r\n    tag,\r\n    date: new Date().toISOString()\r\n    // __v: 0\r\n  };\r\n\r\n  console.log(\"Adding a new note:\", note);\r\n  setnotes(notes.concat(note));\r\n};\r\n\r\n\r\n\r\n//function to editnote\r\nconst editNote=async (id,title,tag,description)=>{\r\n  //api call for update the notes\r\n\r\n  const response = await fetch(`${host}/notes/update`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\r\n    },\r\n    body: JSON.stringify({\r\n       id:id,\r\n       title: title,\r\n       tag:tag,\r\n       description:description\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  \r\n  return response.json(\"successfully update\");\r\n\r\n\r\n}\r\n\r\n\r\n\r\n//function to store the id of note to be delete\r\nconst deleteNote=(id)=>{\r\n\r\ndelete_note_id=id;\r\nconsole.log(delete_note_id);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n//to delete note when only confirm deletion is clicked \r\nconst ConfirmDeleteNote=async()=>{\r\n\r\n  // api call for deletion\r\n  const response = await fetch(`${host}/notes/delete`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\r\n    },\r\n    body: JSON.stringify({\r\n\r\n       id:delete_note_id\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  \r\nconst result= response.json();\r\nconsole.log(result);\r\n\r\n\r\n  \r\n  const NewNotes=notes.filter((note)=>{\r\n    return (note._id!==delete_note_id)});\r\n  setnotes(NewNotes);\r\n};\r\n\r\n\r\n//to handle login \r\nconst HandleLogin=async ()=>{\r\n   var email=document.getElementById('email').value;\r\n   var password=document.getElementById('password').value;\r\n   var email_error=document.getElementById('email_error');\r\n   var password_error=document.getElementById('password_error');\r\n\r\n   if(!email){\r\n    alert(\"Email is require\");\r\n    return false;\r\n   }\r\n\r\n   if(!password){\r\n    alert(\"Password is required\");\r\n    return false;//to prevent form from submission\r\n\r\n   }\r\n\r\n//api call for login\r\n  const response = await fetch(`${host}/api/auth/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"\"\r\n    },\r\n    body: JSON.stringify({\r\n\r\n      email:email,\r\n      password:password,\r\n\r\n     }),\r\n\r\n\r\n  \r\n  });\r\n\r\n  if(response.ok){\r\n    const data=await response.json();\r\n    console.log(data);\r\n\r\n    \r\n      }\r\n      else{\r\n\r\n        email_error.innerHTML=\"* Email is incorrect.\";\r\n        password_error.innerHTML=\"Password is incorrect.\";\r\n        console.log(\"Unable to fetch the data\",response.status);\r\n      }\r\n\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n const HandleSignup= async()=>{\r\n\r\n\r\n\r\n  console.log(\"Sign up clicked\");\r\n\r\nvar name=document.getElementById('name').value;\r\nvar email=document.getElementById('email_sign').value;\r\nvar address=document.getElementById('address').value;\r\nvar password=document.getElementById('password-sign').value;\r\nvar confirmpassword=document.getElementById('confirmpassword').value;\r\n\r\nif(!name){\r\n  alert(\"Name is required\");\r\n  return false;//which prevent the form submission\r\n}\r\n\r\nif(!email){\r\n  alert(\"Email is required\");\r\n  return false;\r\n}\r\n\r\nif(!address){\r\n  alert(\"Address is required\");\r\n  return false;\r\n}\r\nif(!password ){\r\n  alert(\"Password is required.\")\r\n  return false;\r\n\r\n}\r\n\r\nif(!confirmpassword){\r\n  alert(\"Please! Enter confirm Password\");\r\n  return false;\r\n}\r\n\r\nif(confirmpassword!==password){\r\n  alert(\"Confirm Password doesn't match !\");\r\n  return false;\r\n}\r\n\r\n\r\nconsole.log(name);\r\nconsole.log(email);\r\nconsole.log(address);\r\nconsole.log(password);\r\nconsole.log(confirmpassword);\r\n\r\n\r\n//apicall to register user in database\r\n\r\nconst response = await fetch(`${host}/api/auth/createUser`, {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Accept\":\"*/*\",\r\n    \"Content-Type\": \"application/json\",\r\n    \"auth_token\":\"\"\r\n  },\r\n  body: JSON.stringify({\r\n    name:name,\r\n    address:address,\r\n    email:email,\r\n    password:password,\r\n\r\n   }),\r\n\r\n\r\n\r\n});\r\n\r\nif(response.ok){\r\n  const data=await response.json();\r\n  console.log(\"Success fully register user\");\r\n\r\n  return(\r\n<>\r\n<Notes></Notes>\r\n\r\n</>\r\n\r\n\r\n  );\r\n  \r\n    }\r\n    else{\r\n      console.log(\"Unable to fetch the data\",response.status);\r\n    }\r\n\r\n \r\n\r\n\r\n }  \r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n<NoteContext.Provider value={{notes,setnotes,addNote,editNote,deleteNote,ConfirmDeleteNote,HandleLogin,HandleSignup}}>\r\n\r\n{props.children}\r\n    \r\n</NoteContext.Provider>\r\n\r\n\r\n    );\r\n   \r\n\r\n\r\n\r\n\r\n    \r\n  }\r\n\r\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}