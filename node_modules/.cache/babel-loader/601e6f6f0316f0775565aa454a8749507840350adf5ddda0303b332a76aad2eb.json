{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Course\\\\inotebook\\\\src\\\\context\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n\n//creating a notestate and sending to the NoteContext provider\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  var allnotes;\n  var delete_note_id;\n  const host = \"http://localhost:5000\";\n\n  //to fetch all notes of the specific user\n  const initalNotes = async () => {\n    const response = await fetch(`${host}/notes/getnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1MjkwNzE5fQ.zLW9BKFNRoHGyzj10SEapokRXDugskXPI-BFgOhFSBk\"\n      },\n      body: JSON.stringify({\n        \"email\": \"sagar901@gmail.com\",\n        \"password\": \"sagar123\"\n      })\n      // ...\n    });\n    if (response.ok) {\n      const data = await response.json();\n      allnotes = data.notes;\n      console.log(allnotes);\n      setnotes(data.notes);\n    } else {\n      console.log(\"Unable to fetch the data\", response.status);\n    }\n  };\n  useEffect(() => {\n    initalNotes(); // <-- CALL the function when component mounts\n  }, []); // empty dependency array means it runs only once\n\n  const [notes, setnotes] = useState([]);\n\n  //function to add notes\n  const addNote = async (title, description, tag) => {\n    //api call to add note\n\n    const response = await fetch(`${host}/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\n      },\n      body: JSON.stringify({\n        title: title,\n        tag: tag,\n        description: description\n      })\n      // ...\n    });\n    const note = {\n      _id: Math.random().toString(36).substr(2, 9),\n      // fake unique id\n      user: \"some-user-id\",\n      // you can replace this with the actual user ID\n      title,\n      description,\n      tag,\n      date: new Date().toISOString()\n      // __v: 0\n    };\n    console.log(\"Adding a new note:\", note);\n    setnotes(notes.concat(note));\n  };\n\n  //function to editnote\n  const editNote = async (id, title, tag, description) => {\n    //api call for update the notes\n\n    const response = await fetch(`${host}/notes/update`, {\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\n      },\n      body: JSON.stringify({\n        _id: id,\n        title: title,\n        tag: tag,\n        description: description\n      })\n      // ...\n    });\n    return response.json(\"successfully update\");\n\n    // for(let i=0;i<notes.length;i++){\n\n    //   if(notes[i]._id===id){\n\n    //     notes[i].title=title;\n    //     notes[i].tag=tag;\n    //     notes[i].description=description;\n    //     console.log(notes[i]);\n    //     // setnotes(notes.concat(element));\n\n    //   }\n\n    // };\n  };\n\n  //function to store the id of note to be delete\n  const deleteNote = id => {\n    delete_note_id = id;\n    console.log(delete_note_id);\n  };\n\n  //to delete note when only confirm deletion is clicked \n  const ConfirmDeleteNote = async () => {\n    // api call for deletion\n    const response = await fetch(`${host}/notes/delete`, {\n      method: \"DELETE\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\n      },\n      body: JSON.stringify({\n        id: delete_note_id\n      })\n      // ...\n    });\n    const result = response.json();\n    console.log(result);\n    const NewNotes = notes.filter(note => {\n      return note._id !== delete_note_id;\n    });\n    setnotes(NewNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setnotes,\n      addNote,\n      editNote,\n      deleteNote,\n      ConfirmDeleteNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 1\n  }, this);\n};\n_s(NoteState, \"Ms/ybEjMuxQKbHNs5d2OPfAUa4w=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","allnotes","delete_note_id","host","initalNotes","response","fetch","method","headers","body","JSON","stringify","ok","data","json","notes","console","log","setnotes","status","useEffect","addNote","title","description","tag","note","_id","Math","random","toString","substr","user","date","Date","toISOString","concat","editNote","id","deleteNote","ConfirmDeleteNote","result","NewNotes","filter","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/React Course/inotebook/src/context/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\n\r\n\r\n//creating a notestate and sending to the NoteContext provider\r\nconst NoteState=(props)=>{\r\n\r\n\r\n  var allnotes;\r\n  var delete_note_id;\r\n  const host=\"http://localhost:5000\";\r\n\r\n\r\n  //to fetch all notes of the specific user\r\nconst initalNotes=async ()=>{\r\n  const response = await fetch(`${host}/notes/getnotes`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1MjkwNzE5fQ.zLW9BKFNRoHGyzj10SEapokRXDugskXPI-BFgOhFSBk\"\r\n    },\r\n    body: JSON.stringify({\r\n      \"email\":\"sagar901@gmail.com\",\r\n      \"password\":\"sagar123\"\r\n    \r\n\r\n     }),\r\n    // ...\r\n  });\r\n\r\n  if(response.ok){\r\nconst data=await response.json();\r\n allnotes=data.notes;\r\nconsole.log(allnotes);\r\n  setnotes(data.notes);\r\n\r\n  }\r\n  else{\r\n    console.log(\"Unable to fetch the data\",response.status);\r\n  }\r\n\r\n\r\n}\r\n\r\nuseEffect(() => {\r\n  initalNotes(); // <-- CALL the function when component mounts\r\n}, []); // empty dependency array means it runs only once\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    const [notes,setnotes]=useState([]);\r\n\r\n\r\n//function to add notes\r\nconst addNote = async (title, description, tag,) => {\r\n\r\n\r\n\r\n  //api call to add note\r\n\r\n  const response = await fetch(`${host}/notes/addnotes`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\r\n    },\r\n    body: JSON.stringify({\r\n\r\n      title:title,\r\n      tag:tag,\r\n      description:description\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  \r\n\r\n  const note = {\r\n    _id: Math.random().toString(36).substr(2, 9), // fake unique id\r\n    user: \"some-user-id\", // you can replace this with the actual user ID\r\n    title,\r\n    description,\r\n    tag,\r\n    date: new Date().toISOString()\r\n    // __v: 0\r\n  };\r\n\r\n  console.log(\"Adding a new note:\", note);\r\n  setnotes(notes.concat(note));\r\n};\r\n\r\n//function to editnote\r\nconst editNote=async (id,title,tag,description)=>{\r\n  //api call for update the notes\r\n\r\n  const response = await fetch(`${host}/notes/update`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\r\n    },\r\n    body: JSON.stringify({\r\n       _id:id,\r\n       title: title,\r\n       tag:tag,\r\n       description:description\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  \r\n  return response.json(\"successfully update\");\r\n\r\n\r\n\r\n\r\n  // for(let i=0;i<notes.length;i++){\r\n\r\n  //   if(notes[i]._id===id){\r\n     \r\n  //     notes[i].title=title;\r\n  //     notes[i].tag=tag;\r\n  //     notes[i].description=description;\r\n  //     console.log(notes[i]);\r\n  //     // setnotes(notes.concat(element));\r\n\r\n\r\n  //   }\r\n\r\n  // };\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n//function to store the id of note to be delete\r\nconst deleteNote=(id)=>{\r\n\r\ndelete_note_id=id;\r\nconsole.log(delete_note_id);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n//to delete note when only confirm deletion is clicked \r\nconst ConfirmDeleteNote=async()=>{\r\n\r\n  // api call for deletion\r\n  const response = await fetch(`${host}/notes/delete`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjgwNzAzOWE0YzUxNmVjMWFjZDYwODk1IiwibmFtZSI6IlNhZ2FyIEJoYW5kYXJpIiwiZW1haWwiOiJzYWdhcjkwMUBnbWFpbC5jb20ifSwiaWF0IjoxNzQ1NjQ5OTE3fQ.5kpwy_loO958XLJvzsvFM2b7h_YxblZKNihAmnyQcRI\"\r\n    },\r\n    body: JSON.stringify({\r\n\r\n       id:delete_note_id\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  \r\nconst result= response.json();\r\nconsole.log(result);\r\n\r\n\r\n  \r\n  const NewNotes=notes.filter((note)=>{\r\n    return (note._id!==delete_note_id)});\r\n  setnotes(NewNotes);\r\n};\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n<NoteContext.Provider value={{notes,setnotes,addNote,editNote,deleteNote,ConfirmDeleteNote}}>\r\n\r\n{props.children}\r\n    \r\n</NoteContext.Provider>\r\n\r\n\r\n    );\r\n   \r\n\r\n\r\n\r\n\r\n    \r\n  }\r\n\r\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}