{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Course\\\\inotebook\\\\src\\\\context\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport NoteContext from \"./noteContext\";\nimport Notes from \"../Components/Notes\";\nimport Alert from \"../Components/Alert\";\n\n//creating a notestate and sending to the NoteContext provider\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  //useNavigate is use to redirect to another page after successfully login\n  const navigate = useNavigate(); // initialize navigation\n\n  var email;\n  var auth_token = '';\n  const [alertMessage, setAlertMessage] = useState(false);\n  const [pendingDeleteId, setPendingDeleteId] = useState(null);\n  const [alert_type, setalert_type] = useState('danger');\n  var allnotes;\n  var delete_note_id;\n  const host = \"http://localhost:5000\";\n\n  //to fetch all notes of the specific user\n  const initialNotes = async (auth_token, email, password) => {\n    const response = await fetch(`${host}/notes/getnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": auth_token\n      },\n      body: JSON.stringify({\n        \"email\": email,\n        \"password\": password\n      })\n      // ...\n    });\n    if (response.ok) {\n      const data = await response.json();\n      allnotes = data.notes;\n      console.log(allnotes);\n      setnotes(data.notes);\n    } else {\n      console.log(\"Unable to fetch the data\", response.status);\n    }\n  };\n\n  //it act as the componentdidmount() to initally fetch the data\n  useEffect(() => {\n    console.log('auth_token');\n    initialNotes(); // <-- CALL the function when component mounts\n  }, []); // empty dependency array means it runs only once\n\n  const [notes, setnotes] = useState([]);\n\n  //function to add notes\n  const addNote = async (title, description, tag) => {\n    //api call to add note\n\n    const response = await fetch(`${host}/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": `${auth_token}`\n      },\n      body: JSON.stringify({\n        title: title,\n        tag: tag,\n        description: description\n      })\n      // ...\n    });\n    const note = {\n      _id: Math.random().toString(36).substr(2, 9),\n      // fake unique id\n      user: \"some-user-id\",\n      // you can replace this with the actual user ID\n      title,\n      description,\n      tag,\n      date: new Date().toISOString()\n      // __v: 0\n    };\n    console.log(\"Adding a new note:\", note);\n    setnotes(notes.concat(note));\n  };\n\n  //function to editnote\n  const editNote = async (id, title, tag, description) => {\n    //api call for update the notes\n\n    const response = await fetch(`${host}/notes/update`, {\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": auth_token\n      },\n      body: JSON.stringify({\n        id: id,\n        title: title,\n        tag: tag,\n        description: description\n      })\n      // ...\n    });\n    const result = response.json();\n    return result;\n  };\n\n  //function to store the id of note to be delete\n  const deleteNote = id => {\n    setalert_type('danger');\n    setPendingDeleteId(id); // store the note id waiting for confirmation\n    setAlertMessage(\"Are you sure you want to delete this note?\");\n\n    // delete_note_id=id;\n    // console.log(delete_note_id);\n    // setdelete(true);\n    navigate('/notes', {\n      state: {\n        setalert_type: alert_type\n      }\n    });\n  };\n\n  //function to cancel delete \n  const cancelDelete = () => {\n    setPendingDeleteId(null); // Clear pending delete ID\n    setAlertMessage(false); // Dismiss alert\n  };\n\n  //to delete note when only confirm deletion is clicked \n  const ConfirmDeleteNote = async () => {\n    console.log(auth_token);\n    if (!pendingDeleteId) return;\n\n    // api call for deletion\n    const response = await fetch(`${host}/notes/delete`, {\n      method: \"DELETE\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": `${auth_token}`\n      },\n      body: JSON.stringify({\n        id: pendingDeleteId\n      })\n      // ...\n    });\n    setalert_type('success');\n    const result = response.json();\n    console.log(result);\n    const NewNotes = notes.filter(note => note._id !== pendingDeleteId);\n    setnotes(NewNotes);\n\n    //setting color of alert to green\n\n    // Clear pending\n    setPendingDeleteId(null);\n\n    // Success alert\n    setAlertMessage(\"Note deleted successfully!\");\n    setTimeout(() => {\n      setAlertMessage(false);\n    }, 3000);\n    navigate('/notes', {\n      state: {\n        setalert_type: alert_type\n      }\n    });\n  };\n\n  //to handle login \n  const HandleLogin = async () => {\n    email = document.getElementById('email').value;\n    var password = document.getElementById('password').value;\n    var password_error = document.getElementById('password_error');\n    if (!email) {\n      alert(\"Email is require\");\n      return false;\n    }\n    if (!password) {\n      alert(\"Password is required\");\n      return false; //to prevent form from submission\n    }\n\n    //api call for login\n    const response = await fetch(`${host}/api/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      await initialNotes(data.auth_Token, data.user.email, password);\n      auth_token = JSON.stringify(data.auth_Token);\n      console.log(auth_token);\n\n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(data.user));\n      localStorage.setItem('auth_token', JSON.stringify(data.auth_Token));\n\n      // to navigate to home after success login with user details\n      navigate('/', {\n        state: {\n          user: data.user,\n          auth_Token: data.auth_Token\n        }\n      });\n    } else {\n      password_error.innerHTML = \"* Email or Password is incorrect.\";\n      console.log(\"Unable to fetch the data\", response.status);\n    }\n  };\n\n  //to handle signup user registration\n  const HandleSignup = async () => {\n    var name = document.getElementById('name').value;\n    var email = document.getElementById('email_sign').value;\n    var address = document.getElementById('address').value;\n    var password = document.getElementById('password-sign').value;\n    var confirmpassword = document.getElementById('confirmpassword').value;\n    if (!name) {\n      alert(\"Name is required\");\n      return false; //which prevent the form submission\n    }\n    if (!email) {\n      alert(\"Email is required\");\n      return false;\n    }\n    if (!address) {\n      alert(\"Address is required\");\n      return false;\n    }\n    if (!password) {\n      alert(\"Password is required.\");\n      return false;\n    }\n    if (password.length < 8) {\n      alert(\"Password length should be Minimum 8\");\n      return false;\n    }\n    if (!confirmpassword) {\n      alert(\"Please! Enter confirm Password\");\n      return false;\n    }\n    if (confirmpassword !== password) {\n      alert(\"Confirm Password doesn't match !\");\n      return false;\n    }\n\n    //apicall to register user in database\n\n    const response = await fetch(`${host}/api/auth/createUser`, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"*/*\",\n        \"Content-Type\": \"application/json\",\n        \"auth_token\": \"\"\n      },\n      body: JSON.stringify({\n        name: name,\n        address: address,\n        email: email,\n        password: password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      auth_token = data.auth_Token;\n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(data.user));\n      localStorage.setItem('auth_token', JSON.stringify(data.auth_Token));\n      await initialNotes(auth_token, data.user.email, password);\n\n      // to navigate to home after success login with user details\n      navigate('/', {\n        state: {\n          user: data.user,\n          auth_Token: data.auth_Token\n        }\n      });\n    } else {\n      console.log(\"Unable to register User\", response.status);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setnotes,\n      addNote,\n      editNote,\n      deleteNote,\n      ConfirmDeleteNote,\n      HandleLogin,\n      HandleSignup,\n      initialNotes,\n      alertMessage,\n      setAlertMessage,\n      cancelDelete,\n      alert_type,\n      setalert_type\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 1\n  }, this);\n};\n_s(NoteState, \"Vb0cQ0ji/kRYB5ul4Cs6o0QvWf8=\", false, function () {\n  return [useNavigate];\n});\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","NoteContext","Notes","Alert","jsxDEV","_jsxDEV","NoteState","props","_s","navigate","email","auth_token","alertMessage","setAlertMessage","pendingDeleteId","setPendingDeleteId","alert_type","setalert_type","allnotes","delete_note_id","host","initialNotes","password","response","fetch","method","headers","body","JSON","stringify","ok","data","json","notes","console","log","setnotes","status","addNote","title","description","tag","note","_id","Math","random","toString","substr","user","date","Date","toISOString","concat","editNote","id","result","deleteNote","state","cancelDelete","ConfirmDeleteNote","NewNotes","filter","setTimeout","HandleLogin","document","getElementById","value","password_error","alert","auth_Token","localStorage","setItem","innerHTML","HandleSignup","name","address","confirmpassword","length","Provider","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/React Course/inotebook/src/context/NoteState.js"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport NoteContext from \"./noteContext\";\r\nimport Notes from \"../Components/Notes\";\r\nimport Alert from \"../Components/Alert\";\r\n\r\n\r\n//creating a notestate and sending to the NoteContext provider\r\nconst NoteState=(props)=>{\r\n\r\n\r\n  //useNavigate is use to redirect to another page after successfully login\r\n  const navigate = useNavigate(); // initialize navigation\r\n\r\n\r\n  var email;\r\n  var auth_token='';\r\n\r\n\r\n  const [alertMessage, setAlertMessage] = useState(false);\r\n\r\n\r\n  const [pendingDeleteId, setPendingDeleteId] = useState(null);\r\n\r\n  const [alert_type,setalert_type]=useState('danger');\r\n\r\n\r\n\r\n\r\n  var allnotes;\r\n  var delete_note_id;\r\n  const host=\"http://localhost:5000\";\r\n\r\n\r\n  //to fetch all notes of the specific user\r\nconst initialNotes=async (auth_token,email,password)=>{\r\n  const response = await fetch(`${host}/notes/getnotes`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":auth_token\r\n    },\r\n    body: JSON.stringify({\r\n      \"email\":email,\r\n      \"password\":password\r\n    \r\n\r\n     }),\r\n    // ...\r\n  });\r\n\r\n  if(response.ok){\r\nconst data=await response.json();\r\n allnotes=data.notes;\r\nconsole.log(allnotes);\r\n  setnotes(data.notes);\r\n\r\n  }\r\n  else{\r\n    console.log(\"Unable to fetch the data\",response.status);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n//it act as the componentdidmount() to initally fetch the data\r\nuseEffect(() => {\r\n  console.log('auth_token');\r\n  initialNotes(); // <-- CALL the function when component mounts\r\n}, []); // empty dependency array means it runs only once\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    const [notes,setnotes]=useState([]);\r\n\r\n\r\n//function to add notes\r\nconst addNote = async (title, description, tag,) => {\r\n\r\n\r\n\r\n  //api call to add note\r\n\r\n  const response = await fetch(`${host}/notes/addnotes`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":`${auth_token}`\r\n    },\r\n    body: JSON.stringify({\r\n\r\n      title:title,\r\n      tag:tag,\r\n      description:description\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  \r\n\r\n  const note = {\r\n    _id: Math.random().toString(36).substr(2, 9), // fake unique id\r\n    user: \"some-user-id\", // you can replace this with the actual user ID\r\n    title,\r\n    description,\r\n    tag,\r\n    date: new Date().toISOString()\r\n    // __v: 0\r\n  };\r\n\r\n  console.log(\"Adding a new note:\", note);\r\n  setnotes(notes.concat(note));\r\n};\r\n\r\n\r\n\r\n//function to editnote\r\nconst editNote=async (id,title,tag,description)=>{\r\n\r\n  //api call for update the notes\r\n\r\n  const response = await fetch(`${host}/notes/update`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":auth_token\r\n    },\r\n    body: JSON.stringify({\r\n       id:id,\r\n       title:title,\r\n       tag:tag,\r\n       description:description\r\n\r\n     }),\r\n    // ...\r\n  });\r\n  const result=response.json();\r\n  return result;\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n//function to store the id of note to be delete\r\nconst deleteNote=(id)=>{\r\n\r\n\r\n  setalert_type('danger')\r\n\r\n  setPendingDeleteId(id); // store the note id waiting for confirmation\r\n  setAlertMessage(\"Are you sure you want to delete this note?\");\r\n\r\n// delete_note_id=id;\r\n// console.log(delete_note_id);\r\n// setdelete(true);\r\nnavigate('/notes',{state:{setalert_type:alert_type}});\r\n};\r\n\r\n\r\n//function to cancel delete \r\nconst cancelDelete = () => {\r\n  setPendingDeleteId(null); // Clear pending delete ID\r\n  setAlertMessage(false); // Dismiss alert\r\n};\r\n\r\n\r\n\r\n//to delete note when only confirm deletion is clicked \r\nconst ConfirmDeleteNote=async()=>{\r\n  \r\n  console.log(auth_token);\r\n\r\n  if (!pendingDeleteId) return;\r\n  \r\n  // api call for deletion\r\n  const response = await fetch(`${host}/notes/delete`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":`${auth_token}`\r\n    },\r\n    body: JSON.stringify({\r\n      \r\n      id:pendingDeleteId\r\n      \r\n    }),\r\n    // ...\r\n  });\r\n  \r\n  setalert_type('success');\r\nconst result= response.json();\r\nconsole.log(result);\r\n\r\n\r\n  \r\n  const NewNotes=notes.filter((note)=>\r\n    note._id!==pendingDeleteId);\r\n  setnotes(NewNotes);\r\n\r\n//setting color of alert to green\r\n\r\n  // Clear pending\r\n  setPendingDeleteId(null);\r\n  \r\n  // Success alert\r\n  setAlertMessage(\"Note deleted successfully!\");\r\n\r\n  setTimeout(() => {\r\n    setAlertMessage(false);\r\n  }, 3000);\r\n\r\n  navigate('/notes' ,{state:{setalert_type:alert_type}});\r\n};\r\n\r\n\r\n//to handle login \r\nconst HandleLogin=async ()=>{\r\n    email=document.getElementById('email').value;\r\n    var password=document.getElementById('password').value;\r\n   var password_error=document.getElementById('password_error');\r\n\r\n   if(!email){\r\n    alert(\"Email is require\");\r\n    return false;\r\n   }\r\n\r\n   if(!password){\r\n    alert(\"Password is required\");\r\n    return false;//to prevent form from submission\r\n\r\n   }\r\n\r\n//api call for login\r\n  const response = await fetch(`${host}/api/auth/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Accept\":\"*/*\",\r\n      \"Content-Type\": \"application/json\",\r\n      \"auth_token\":\"\"\r\n    },\r\n    body: JSON.stringify({\r\n\r\n      email:email,\r\n      password:password,\r\n\r\n     }),\r\n\r\n\r\n  \r\n  });\r\n\r\n  if(response.ok){\r\n    const data=await response.json();\r\n\r\n    await initialNotes(data.auth_Token,data.user.email,password)\r\n    auth_token=JSON.stringify(data.auth_Token);\r\n    console.log(auth_token);\r\n\r\n\r\n\r\n      // Save to localStorage\r\n  localStorage.setItem('user', JSON.stringify(data.user ));\r\n    localStorage.setItem('auth_token',JSON.stringify(data.auth_Token));\r\n    \r\n\r\n    // to navigate to home after success login with user details\r\n    navigate('/',{state:{user:data.user,auth_Token:data.auth_Token}});\r\n\r\n      }\r\n      else{\r\n\r\n  \r\n        password_error.innerHTML=\"* Email or Password is incorrect.\";\r\n        console.log(\"Unable to fetch the data\",response.status);\r\n      }\r\n\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n//to handle signup user registration\r\n const HandleSignup= async()=>{\r\n\r\n\r\n\r\n\r\nvar name=document.getElementById('name').value;\r\nvar email=document.getElementById('email_sign').value;\r\nvar address=document.getElementById('address').value;\r\nvar password=document.getElementById('password-sign').value;\r\nvar confirmpassword=document.getElementById('confirmpassword').value;\r\n\r\nif(!name){\r\n  alert(\"Name is required\");\r\n  return false;//which prevent the form submission\r\n}\r\n\r\nif(!email){\r\n  alert(\"Email is required\");\r\n  return false;\r\n}\r\n\r\nif(!address){\r\n  alert(\"Address is required\");\r\n  return false;\r\n}\r\nif(!password ){\r\n  alert(\"Password is required.\")\r\n  return false;\r\n\r\n}\r\n\r\nif(password.length<8){\r\n  alert(\"Password length should be Minimum 8\");\r\n  return false;\r\n}\r\n\r\nif(!confirmpassword){\r\n  alert(\"Please! Enter confirm Password\");\r\n  return false;\r\n}\r\n\r\nif(confirmpassword!==password){\r\n  alert(\"Confirm Password doesn't match !\");\r\n  return false;\r\n}\r\n\r\n\r\n//apicall to register user in database\r\n\r\nconst response = await fetch(`${host}/api/auth/createUser`, {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Accept\":\"*/*\",\r\n    \"Content-Type\": \"application/json\",\r\n    \"auth_token\":\"\"\r\n  },\r\n  body: JSON.stringify({\r\n    name:name,\r\n    address:address,\r\n    email:email,\r\n    password:password,\r\n\r\n   }),\r\n\r\n\r\n\r\n});\r\n\r\nif(response.ok){\r\n  const data=await response.json();\r\n\r\n\r\nauth_token=data.auth_Token;\r\n    // Save to localStorage\r\nlocalStorage.setItem('user', JSON.stringify(data.user));\r\n  localStorage.setItem('auth_token',JSON.stringify(data.auth_Token));\r\n  \r\n  await initialNotes(auth_token,data.user.email,password);\r\n\r\n  // to navigate to home after success login with user details\r\n  navigate('/',{state:{user:data.user,auth_Token:data.auth_Token}});\r\n\r\n    }\r\n\r\n    else{\r\n      console.log(\"Unable to register User\",response.status);\r\n    }\r\n\r\n \r\n\r\n }  \r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n<NoteContext.Provider value={{notes,setnotes,addNote,editNote,deleteNote,ConfirmDeleteNote,HandleLogin,HandleSignup,initialNotes,alertMessage, setAlertMessage,cancelDelete,alert_type,setalert_type }}>\r\n\r\n{props.children}\r\n    \r\n</NoteContext.Provider>\r\n\r\n\r\n    );\r\n   \r\n\r\n\r\n\r\n\r\n    \r\n  }\r\n\r\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}